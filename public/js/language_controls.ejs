let eyeEchoUserLanguageCode;

function getTextForLanguage(callback){
	let languageCode;
	if (window.eyeEcho_forcedLanguageCode != ""){
		languageCode = window.eyeEcho_forcedLanguageCode;
	}else{
		languageCode = eyeEchoReadCookie("eyeEcho_languageCode");
		languageCode = languageCode == "" ? navigator.language : languageCode;
		if (languageCode.substring(0,2) == "nn" || languageCode.substring(0,2) == "no"){
			languageCode = languageCode.replace("no","nb").replace("nn","nb");
		}
	}

	if (languageCode.length > 3){
		languageCode = languageCode.split("-")[0];
	}

	eyeEchoUsedLanguageCode = languageCode;

	let languageFile = languageCode+".json";
	//languageFile = "xx.json";
	//eyeEchoGetLanguageFile("xx.json", (defaultObj)=>{
	eyeEchoGetLanguageFile("en.json", (defaultObj)=>{
		if (defaultObj.status == "200"){
			if (languageFile == "en.json"){

				callback(JSON.parse(defaultObj.data));
			}else{
				render_jsonTextObject(JSON.parse(defaultObj.data));

				eyeEchoGetLanguageFile(languageFile, (responseObj)=>{
					if (responseObj.status == "200"){
						callback(JSON.parse(responseObj.data));
					}else{
						if (languageCode.length > 3){

							eyeEchoGetLanguageFile(languageCode.split("-")[0]+".json", (fallbackObj)=>{
								if (fallbackObj.status == "200"){
									callback(JSON.parse(fallbackObj.data));
								}else{
									reportError({
										"title": "WARNING - languageCode "+languageCode.split("-")[0],
										"value": "FALLBACK Language File for "+languageCode.split("-")[0]+" not retreived from Front end server.\nStatusCode: "+fallbackObj.status,
										"color": "warning"
									});
									callback(JSON.parse(defaultObj.data));
								}
							});
						}else{
							reportError({
								"title": "WARNING - languageCode "+languageCode,
								"value": "FALLBACK Language File for "+languageCode+" not retreived from Front end server.\nStatusCode: "+responseObj.status,
								"color": "warning"
							});
							callback(JSON.parse(defaultObj.data));
						}
					}
				})

			}
		}else{
			reportError({
				"title": "ERROR in getting file en.json",
				"value": "Language File en.json not retreived from Front end server.\nStatusCode: "+defaultObj.status
			});
		}
	});
}

function eyeEchoGetLanguageFile(fileName,callback){
	let xhr = new XMLHttpRequest();
	if ( "<%=FRONTEND_URL%>" == "https://facemappingconsumer-production.herokuapp.com" || "<%=FRONTEND_URL%>" == "https://facemapping.me"){
		xhr.open("GET", "<%=FRONTEND_URL%>/lang/"+fileName+"?"+eyeEchoSessionTimeString );
	}else{
		xhr.open("GET", "<%=FRONTEND_URL%>/lang_staging/"+fileName+"?"+eyeEchoSessionTimeString );
	}
	xhr.setRequestHeader('Content-Type', 'text/plain');
	xhr.onreadystatechange = function(){

		if(this.readyState == 4){
			callback({status: this.status, data:this.responseText});
		}
	}
	xhr.send();
}

// RENDER START


function languageToUserSettings(languageElementObj, callback){

	render_jsonTextObject(languageElementObj);

	callback();
}

function render_jsonTextObject(textObj){

	Object.keys(textObj).forEach((item,index)=>{
		if ( item == "!variables!"){
			updateJsVariables(textObj["!variables!"]);
		}else if ( item == "!attributes!"){
			updateAttributes(textObj["!attributes!"]);
		}else{
			if (typeof textObj[item] == "object"){
				render_jsonTextObject(textObj[item]);
			}else{
				try{
					if (document.getElementById(item) != null){
						document.getElementById(item).innerHTML = textObj[item];
					}
				}catch(err){
					console.log('Element with id '+item+' not found - err: ',err);
				}
			}
		}
	})
}

function updateJsVariables(variablesObj){
	Object.keys(variablesObj).forEach((item,index)=>{
		try{
			this[item] = variablesObj[item];
		}catch(err){
			console.log('Variable '+ item +' not found - err: ',err);
		}
	});
}


function updateAttributes(attributeObj){
	Object.keys(attributeObj).forEach((item, index) => {
		let attrName = Object.keys(attributeObj[item]);
		let attrValue = attributeObj[item][attrName];
		if (document.getElementById(item) != null){
			try{
				document.getElementById(item).setAttribute(attrName,attrValue);
			}catch(err){
				logOnLocalHostFrontEnd("error in setting attributes: ",err);
			}

		}
	});
}


// RENDER END
